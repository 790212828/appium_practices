#装饰器最主要的功能是增强已有的函数

#a是最基础的函数
#如果想对a方法 进行增强的话，可以直接向a中添加代码
#问题：如果功能越来越多的话，每个功能代码都写在a函数中，
# a代码会越来越多导致冗余，后期不好维护代码，find方法一样
#解决：如何不改动a代码，对a功能进行增强
def a():
    print("hello")#新增的功能
    print("我是 a")
    print("good bye")#新增的功能

#装饰器定义为b
#0、 定义装饰器，可以是函数，也可以是类，比如下面代码定义了装饰器b，b的名字可以随便取
#1、 b的参数是被装饰的对象，参数名可以随便取
#2、 在b中声明一个函数，函数的名字可以随便取，
# 但是一定要和return的值一致，比如函数的名字叫c，return的值也必须是c
#3、 如何使用装饰器？详情见c代码
#4、 如果装饰器的是 c，那么fun是c ，不是c()，一定不要混淆两者
def b(fun):#不加括号fun 是函数名==函数id，加了括号fun()是表示调用函数
    def f():
        print("hello")
        fun()
        print("good bye")
    return f

#1、 装饰器，需要使用“@”符号进行调用，比如@b就是调用b装饰器
@b
def c():
    print("我是 c")


def test_c():
    c()
    print("-----------")
    c
    print(f"不加括号，只是函数id，不会调用函数：{c}")

class TestDemo:
    def test_c(self):
        c()
